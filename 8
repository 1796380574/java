class Book{
    private int ISBN;
    private String name;
    private double price;
    private String publisher;

    public Book(int ISBN,String name,double price,String publisher){
        this.ISBN=ISBN;
        this.name=name;
        this.price=price;
        this.publisher=publisher;
    }


    public int getISBN() {
        return ISBN;
    }

    public void setISBN(int ISBN) {
        this.ISBN = ISBN;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getPublisher() {
        return publisher;
    }

    public void setPublisher(String publisher) {
        this.publisher = publisher;
    }
}

class Student implements Comparable{
    private int id;
    private String name;
    private int age;
    Student(String name,int id,int age){
        this.name=name;
        this.id=id;
        this.age=age;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int compareTo(Object o){
        if(! (o instanceof Student)){
            throw new RuntimeException("The object is not  Student");
        }
        Student p=(Student)o;
        if(age<p.age)return 1;
        else if(age==p.age)return this.name.compareTo(p.name);
        else return -1;
    }
}

//使用链表和映射存放多个图书信息，遍历并输出。
// 其中商品属性：编号，名称，单价，出版社；
// 使用商品编号作为映射中的key。

import org.omg.PortableInterceptor.INACTIVE;

import java.util.*;
import java.util.Iterator;
import java.util.TreeMap;
import java.util.Map;
import java.util.AbstractMap;

public class Test {
    public static void main(String[] args) {
//        Test of LinkedList
        LinkedList<Book> books = new LinkedList<Book>();
        books.add(new Book(1,"book1",10.0,"sun"));
        books.add(new Book(2,"book2",20.0,"sun"));
        books.add(new Book(3,"book3",30.0,"sun"));
        books.add(new Book(4,"book4",40.0,"sun"));
        for(Book x:books){
            System.out.println(x.getISBN()+" "+x.getName()+" "+x.getPrice()+" "+x.getPublisher());
        }

//        Test of TreeMap
        Map<Integer,Book> ex_books=new TreeMap<Integer, Book>();
        ex_books.put(1,new Book(1,"book1",10.0,"sun"));
        ex_books.put(2,new Book(2,"book2",20.0,"sun"));
        ex_books.put(3,new Book(3,"book3",30.0,"sun"));
        ex_books.put(4,new Book(4,"book4",40.0,"sun"));
//        for(int i=1;i<5;i++) {
//            System.out.println(ex_books.get(i).getISBN() + " " + ex_books.get(i).getName() + " " + ex_books.get(i).getPrice() + " " + ex_books.get(i).getPublisher());
//        }
        Iterator it=ex_books.entrySet().iterator();
        while(it.hasNext()){
            Map.Entry entry = (Map.Entry)it.next();
            System.out.println(entry.getKey()+" "+(entry.getKey())+" "+
                    ((Book)entry.getValue()).getPrice()+" "+((Book)entry.getValue()).getPublisher());
        }

    }
}

/*
2、由控制台按照固定格式输入学生信息，包括学号，姓名，年龄信息，当输入的内容为exit退出；
将输入的学生信息分别封装到一个Student对象中，再将每个Student对象加入到一个集合中，要求集合中的元素按照年龄大小正序排序；
最后遍历集合，将集合中学生信息写入到记事本，每个学生数据占单独一行。
 */

//import java.util.*;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;


public class Test_EX {
    public static void main(String[] args) {
        Set<Student> students = new TreeSet<Student>();
        Scanner kb = new Scanner(System.in);
        String name;
        String BROKE = "exit";
        int id,age;
        while(true){
            name=kb.next();
            if(name.equals(BROKE))break;
            id=kb.nextInt();
            age=kb.nextInt();
            students.add(new Student(name,id,age));
        }

        Iterator<Student> it = students.iterator();
        while(it.hasNext()) {
            Student p = (Student)it.next();
            System.out.println(p.getName());
        }
    }
}
